// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User role enum
enum Role {
  CONSULTANT
  MANAGER
  ADMIN
}

// User model for authentication
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  password        String?
  role            Role      @default(CONSULTANT)
  emailVerified   DateTime?
  image           String?
  organizationId  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastActive      DateTime  @default(now())

  // Relations
  accounts        Account[]
  sessions        Session[]
  verificationTokens VerificationToken[]
  passwordResetTokens PasswordResetToken[]
  integrations    Integration[]
  jiraOAuthStates JiraOAuthState[]
  tickets         Ticket[]
}

// Account model for NextAuth OAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Session model for NextAuth
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Verification token for email verification
model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  userId     String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

// Password reset token
model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Integration types enum
enum IntegrationType {
  JIRA
  GITHUB
  SALESFORCE
}

// Integration model for external service connections
model Integration {
  id        String          @id @default(cuid())
  userId    String
  type      IntegrationType
  config    Json            // Stores encrypted tokens and configuration
  isActive  Boolean         @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
}

// Jira OAuth state for CSRF protection
model JiraOAuthState {
  id          String   @id @default(cuid())
  state       String   @unique
  userId      String
  instanceUrl String
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([state])
  @@index([userId])
}

// Ticket status enum
enum TicketStatus {
  NEW
  ANALYZING
  CLARIFYING
  READY
  IMPLEMENTING
  TESTING
  COMPLETED
  FAILED
}

// Organization model
model Organization {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tickets Ticket[]
}

// Ticket model for Jira issues
model Ticket {
  id                 String       @id @default(cuid())
  jiraKey            String       @unique
  jiraId             String       @unique
  summary            String
  description        String       @db.Text
  status             TicketStatus @default(NEW)
  ambiguityScore     Float?
  acceptanceCriteria String?      @db.Text
  assignedToId       String
  organizationId     String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  // Relations
  assignedTo     User           @relation(fields: [assignedToId], references: [id])
  organization   Organization   @relation(fields: [organizationId], references: [id])
  clarifications Clarification[]

  @@index([jiraKey])
  @@index([assignedToId])
  @@index([status])
}

// Clarification model for Q&A on tickets
model Clarification {
  id        String   @id @default(cuid())
  ticketId  String
  question  String   @db.Text
  answer    String?  @db.Text
  source    String   // e.g., "JIRA_WEBHOOK", "MANUAL", "AI"
  askedBy   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ticket Ticket @relation(fields: [ticketId], references: [jiraKey])

  @@index([ticketId])
}